//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SME.CPP.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class TopLevel : TopLevelBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 1 ""
            this.Write("﻿");
            
            #line default
            #line hidden
            
            #line 6 ""
            this.Write("#include <iostream>\n#include <fstream>\n#include <sstream>\n#include \"SystemTypes.h" +
                    "pp\"\n#include \"");
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.DefinitionsFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write("\"\n\n");
            
            #line default
            #line hidden
            
            #line 12 ""
 foreach(var process in Network.Processes) { 
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write("#include \"");
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( process.Name ));
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(".hpp\"\n");
            
            #line default
            #line hidden
            
            #line 14 ""
 } 
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write(@"
// Insert additional includes and methods here
// #### USER-DATA-INCLUDE-START
// #### USER-DATA-INCLUDE-END

system_uint8 parse_system_uint8(std::string value) {
    return (system_uint8)std::stoi(value, 0, 2);
}

system_int8 parse_system_int8(std::string value) {
    return (system_int8)std::stoi(value, 0, 2);
}

system_bool parse_system_bool(std::string value) {
    return parse_system_uint8(value) == 1;
}

system_uint16 parse_system_uint16(std::string value) {
    return (system_uint16)std::stoi(value, 0, 2);
}

system_int16 parse_system_int16(std::string value) {
    return (system_int16)std::stoi(value, 0, 2);
}

system_uint32 parse_system_uint32(std::string value) {
    return (system_uint32)std::stoi(value, 0, 2);
}

system_int32 parse_system_int32(std::string value) {
    return (system_int32)std::stoi(value, 0, 2);
}

system_uint64 parse_system_uint64(std::string value) {
    return (system_uint64)std::stoll(value, 0, 2);
}

system_int64 parse_system_int64(std::string value) {
    return (system_int64)std::stoll(value, 0, 2);
}

// The names of all signals
std::string SIGNAL_NAMES[] = {
");
            
            #line default
            #line hidden
            
            #line 58 ""
 foreach (var signal in RS.DriverSignals.Union(RS.VerifySignals)) { 
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write("    \"");
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TestBenchSignalName(signal) ));
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write("\",\n");
            
            #line default
            #line hidden
            
            #line 60 ""
 } 
            
            #line default
            #line hidden
            
            #line 61 ""
            this.Write("};\n\nvoid RunSimulation(const char* tracefile)\n{\n");
            
            #line default
            #line hidden
            
            #line 65 ""
 foreach(var bus in Network.Busses) { 
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(" bus_");
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 67 ""
 } 
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 69 ""
 foreach(var process in Network.Processes) {

       var busses = process.InputBusses.Union(process.OutputBusses).Union(process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();

            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( process.Name ));
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(" proc_");
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( process.Name ));
            
            #line default
            #line hidden
            
            #line 73 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 73 ""
 foreach(var bus in busses) { 
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("&bus_");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus == busses.Last() ? "" : ", " ));
            
            #line default
            #line hidden
            
            #line 74 ""
 } 
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(");\n");
            
            #line default
            #line hidden
            
            #line 76 ""
 } 
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(@"
    // Open the trace file and validate the headers
    std::string line;
    std::string token;
    std::ifstream trace(tracefile);
    if (trace.bad()) {
        std::cout << ""File not found: "" << tracefile << std::endl;
        return;
    }

    if (!std::getline(trace, line)) {
        std::cout << ""File was empty: "" << tracefile << std::endl;
        return;
    }

    std::istringstream headerlinestream(line);
    size_t field = 0;
    while(std::getline(headerlinestream, token, ',')) {
        if (token.compare(SIGNAL_NAMES[field]) != 0) {
            std::cout << ""Field #"" << field << "" should be named "" << SIGNAL_NAMES[field] << "" but is named "" << token << "", the trace file cannot be used"" << std::endl;
            return;
        }
        field++;
    }

    size_t cycle = 0;

    // Run all clock ticks
    while(std::getline(trace, line)) {
");
            
            #line default
            #line hidden
            
            #line 106 ""
 if (Network.Busses.Any(x => x.IsClocked)) { 
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write("        // Propagate clocked busses\n");
            
            #line default
            #line hidden
            
            #line 108 ""
     foreach(var bus in Network.Busses.Where(x => x.IsClocked)) { 
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(".Propagate();\n");
            
            #line default
            #line hidden
            
            #line 110 ""
     } 
            
            #line default
            #line hidden
            
            #line 111 ""
 } 
            
            #line default
            #line hidden
            
            #line 112 ""
            this.Write("        // Apply the source signals\n        std::istringstream valuestream(line);" +
                    "\n        field = 0;\n\n");
            
            #line default
            #line hidden
            
            #line 116 ""
 foreach (var signal in RS.DriverSignals) { 
            
            #line default
            #line hidden
            
            #line 117 ""
            this.Write("        if (!std::getline(valuestream, token, \',\')) {\n            std::cout << \"U" +
                    "nexpected end-of-line in cycle \" << cycle << \", field \" << field << std::endl;\n " +
                    "           return;\n        }\n        bus_");
            
            #line default
            #line hidden
            
            #line 121 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 121 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 121 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 121 ""
            this.Write("(parse_");
            
            #line default
            #line hidden
            
            #line 121 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 121 ""
            this.Write("(token));\n        field++;\n");
            
            #line default
            #line hidden
            
            #line 123 ""
 } 
            
            #line default
            #line hidden
            
            #line 124 ""
            this.Write("\n        // Follow the query plan\n");
            
            #line default
            #line hidden
            
            #line 126 ""
 foreach(var n in Graph.ExecutionPlan) { 
       var pn = GetProcess(n.Item);
       if (pn != null) {

            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write("        proc_");
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( pn.Name ));
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(".onTick();\n");
            
            #line default
            #line hidden
            
            #line 131 ""
     } 
            
            #line default
            #line hidden
            
            #line 132 ""
     foreach(var b in n.Item.OutputBusses) { 
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write(".forward_signals();\n");
            
            #line default
            #line hidden
            
            #line 134 ""
     } 
            
            #line default
            #line hidden
            
            #line 135 ""
     foreach(var b in n.PropagateAfter) { 
            
            #line default
            #line hidden
            
            #line 136 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 136 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 136 ""
            this.Write(".propagate_signals();\n");
            
            #line default
            #line hidden
            
            #line 137 ""
     } 
            
            #line default
            #line hidden
            
            #line 138 ""
     foreach(var b in n.Item.InternalBusses) { 
            
            #line default
            #line hidden
            
            #line 139 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 139 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 139 ""
            this.Write(".propagate_signals();\n");
            
            #line default
            #line hidden
            
            #line 140 ""
     } 
            
            #line default
            #line hidden
            
            #line 141 ""
 } 
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write("\n        // Verify the cycles\n");
            
            #line default
            #line hidden
            
            #line 144 ""
 foreach (var signal in RS.VerifySignals) { 
            
            #line default
            #line hidden
            
            #line 145 ""
            this.Write("        if (!std::getline(valuestream, token, \',\')) {\n            std::cout << \"U" +
                    "nexpected end-of-line in cycle \" << cycle << \", field \" << field << std::endl;\n " +
                    "           return;\n        }\n\n        if (bus_");
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write("() != parse_");
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write("(token)) {\n            std::cout << \"Error in cycle \" << cycle << std::endl;\n    " +
                    "        std::cout << \"Expected value \" << parse_");
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write("(token) << \", but got \" << bus_");
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write("() << \" for field \" << SIGNAL_NAMES[field] << \" (raw: \" << token << \")\" << std::e" +
                    "ndl;\n            return;\n        }\n        field++;\n");
            
            #line default
            #line hidden
            
            #line 156 ""
 } 
            
            #line default
            #line hidden
            
            #line 157 ""
            this.Write("\n        cycle++;\n    }\n\n    std::cout << \"Completed \" << cycle << \" simulation c" +
                    "ycles\" << std::endl;\n}\n\n\nint main()\n{\n\n// Insert additional startup code here\n//" +
                    " #### USER-DATA-STARTUP-CODE-START\n// #### USER-DATA-STARTUP-CODE-END\n\n    RunSi" +
                    "mulation(\"");
            
            #line default
            #line hidden
            
            #line 172 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.CSVTracename ));
            
            #line default
            #line hidden
            
            #line 172 ""
            this.Write("\");\n    return 0;\n}\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class TopLevelBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
